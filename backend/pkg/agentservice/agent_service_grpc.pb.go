// proto/agent_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: agent_service.proto

package agentservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_Ping_FullMethodName                 = "/agent_service.AIService/Ping"
	AIService_ExtractFeatures_FullMethodName      = "/agent_service.AIService/ExtractFeatures"
	AIService_SaveExtractedRecord_FullMethodName  = "/agent_service.AIService/SaveExtractedRecord"
	AIService_GetExtractionHistory_FullMethodName = "/agent_service.AIService/GetExtractionHistory"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Service Definition ---
type AIServiceClient interface {
	// BK-01 Test Task: Ensures the communication link is functional
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// AI-01 Core Task: Request AI to perform structured data extraction
	ExtractFeatures(ctx context.Context, in *FeatureExtractRequest, opts ...grpc.CallOption) (*FeatureExtractResponse, error)
	// BK-02/FE-03 History Tasks: Save and retrieve extracted records
	SaveExtractedRecord(ctx context.Context, in *ExtractedRecord, opts ...grpc.CallOption) (*Empty, error)
	GetExtractionHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExtractionHistoryResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, AIService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) ExtractFeatures(ctx context.Context, in *FeatureExtractRequest, opts ...grpc.CallOption) (*FeatureExtractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureExtractResponse)
	err := c.cc.Invoke(ctx, AIService_ExtractFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) SaveExtractedRecord(ctx context.Context, in *ExtractedRecord, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AIService_SaveExtractedRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetExtractionHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExtractionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractionHistoryResponse)
	err := c.cc.Invoke(ctx, AIService_GetExtractionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
//
// --- Service Definition ---
type AIServiceServer interface {
	// BK-01 Test Task: Ensures the communication link is functional
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// AI-01 Core Task: Request AI to perform structured data extraction
	ExtractFeatures(context.Context, *FeatureExtractRequest) (*FeatureExtractResponse, error)
	// BK-02/FE-03 History Tasks: Save and retrieve extracted records
	SaveExtractedRecord(context.Context, *ExtractedRecord) (*Empty, error)
	GetExtractionHistory(context.Context, *Empty) (*ExtractionHistoryResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAIServiceServer) ExtractFeatures(context.Context, *FeatureExtractRequest) (*FeatureExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractFeatures not implemented")
}
func (UnimplementedAIServiceServer) SaveExtractedRecord(context.Context, *ExtractedRecord) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveExtractedRecord not implemented")
}
func (UnimplementedAIServiceServer) GetExtractionHistory(context.Context, *Empty) (*ExtractionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtractionHistory not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_ExtractFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).ExtractFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_ExtractFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).ExtractFeatures(ctx, req.(*FeatureExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_SaveExtractedRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractedRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).SaveExtractedRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_SaveExtractedRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).SaveExtractedRecord(ctx, req.(*ExtractedRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetExtractionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetExtractionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetExtractionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetExtractionHistory(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_service.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AIService_Ping_Handler,
		},
		{
			MethodName: "ExtractFeatures",
			Handler:    _AIService_ExtractFeatures_Handler,
		},
		{
			MethodName: "SaveExtractedRecord",
			Handler:    _AIService_SaveExtractedRecord_Handler,
		},
		{
			MethodName: "GetExtractionHistory",
			Handler:    _AIService_GetExtractionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_service.proto",
}
